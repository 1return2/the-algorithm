
//#include <iostream>
//#include <stdio.h>
//#include <vector>
//using namespace std;
//#include <vector>
//
//class Solution {
//public:
//    int removeDuplicates(vector<int>& nums) {
//        int number = nums.size();
//        if (number == 0) {
//            perror("removeDuplicates 传入数组为空\n");
//            exit(errno);
//        }
//        int size_newarr = 0;
//        vector<int> newnums;
//        newnums.push_back(nums[0]);
//        for (int i = 0; i < number; i++)
//        {
//            if(newnums[i]== nums[i]){
//                continue;
//            }
//            else {
//                newnums.push_back(nums[i]);
//                size_newarr++;
//            }
//            
//        }
//        return size_newarr + 1;
//
//    }
//};
//
//
//int main()
//{
//    Solution a;
//    cout << "开始解决";
//    vector<int> arr;
//    arr.push_back(1);
//    arr.push_back(2); 
//    arr.push_back(4);
//    cout << a.removeDuplicates(arr) << endl;
//
//
//    return 0;
//}
//

#include <iostream>
#include <stdio.h>
#include <vector>
using namespace std;

/*
class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        int number = nums.size();
        if (number == 0) {
            perror("removeDuplicates 传入数组为空\n");
            exit(errno);
        }
        int size_newarr = 0;
        vector<int> newnums;
        newnums.push_back(nums[0]);
        for (int i = 1; i < number; i++) {  // 从第二个元素开始比较
            if (newnums[size_newarr] == nums[i]) {
                continue;
            }
            else {
                newnums.push_back(nums[i]);
                size_newarr++;
            }
        }
        return size_newarr + 1;
    }
};*/
//输入：prices = [7, 1, 5, 3, 6, 4]
//输出：7
//解释：在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4 。
//随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6 - 3 = 3 。
//总利润为 4 + 3 = 7 。
//[7, 1, 5, 3, 6, 4]
//class Solution {
//public:
//    int sum=0;
//    int maxProfit(vector<int>& prices) {
//        
//        int max = prices[0];
//        int min = prices[0];
//        for (int i = 1; i < prices.size(); i++) {
//
//            if (max < prices[i]) {
//                max = prices[i];
//            }
//            else if (max > prices[i]) {
//                sum = sum + max - min;
//                min = prices[i];
//                max = prices[i];
//            }
//
//        }
//        sum += max - min;
//        return sum;
//    }
//};


class Solution {
public:
   void rotate(vector<int>& nums, int k) {
        int length = nums.size();
        vector<int> newnum(nums);
        for (int i = 0; i < length; i++) {
            newnum[i] = nums[i + k % length];
        }
        nums = newnum;
    }
    void rotate(vector<int>& nums, int k) {
        int length = nums.size();
        vector<int> newnum(length);

        for (int i = 0; i < length; i++) {
            newnum[(i + k) % length] = nums[i];
        }

        nums = newnum;
    }

};
int main() {
    Solution a;
   
    vector<int> arr;
    arr.push_back(7);
    arr.push_back(1);
    arr.push_back(5);  // 加入一个重复元素测试
    arr.push_back(3);
    arr.push_back(6);
    arr.push_back(4);
    a.rotate(arr,0);


   for (int i = 0; i < arr.size(); i++) {
        std::cout << "Element at index " << i << ": " << arr[i] << std::endl;
    }

    return 0;
}

